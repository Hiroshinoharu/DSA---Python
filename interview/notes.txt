Implementation and Interview Questions

Problem Solving Approach:

Brute Force Approach

Naive Approach

Ask for Clarification

Think Aloud
Break Down the Problem

Ask for Examples

Optimize the Solution

Avoid O(n^2) solutions

Use Readable names for variables and functions

Common Patterns:

sliding window
two pointers
divide and conquer
hash table
Fast and slow pointers

Work At Google youtube

2 sum:

nums = [2, 7, 11, 15] target = 9

Designing a Doubly Linked List:

class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None

class DoublyLinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None

    def append(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
    
    def display(self):
        current = self.head
        while current:
            print(current.value, end=' ')
            current = current.next
        print()
    
    def display_reverse(self):
        current = self.tail
        while current:
            print(current.value, end=' ')
            current = current.prev